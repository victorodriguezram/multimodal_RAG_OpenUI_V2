# Docker Compose DEBUG configuration for external access troubleshooting
# Use this version when having connectivity issues

services:
  # Development version of RAG Application with DEBUG mode
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: multimodal-rag-app-debug
    environment:
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.0-flash-exp}
      - DATA_DIR=/app/data
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_RUNONSTARTUP=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=true
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      - PYTHONUNBUFFERED=1
    ports:
      - "8501:8501"
      - "8000:8000"
    volumes:
      - ./:/app
      - rag_data_debug:/app/data
      - rag_uploads_debug:/app/uploads
    networks:
      - rag-network-debug
    restart: unless-stopped
    depends_on:
      - redis-debug
    command: ["/app/start-debug.sh"]
    # Disabled health check for debugging
    # healthcheck:
    #   test: ["CMD", "/app/healthcheck-simple.sh"]
    #   interval: 60s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 180s

  # Redis for debugging
  redis-debug:
    image: redis:7-alpine
    container_name: rag-redis-debug
    ports:
      - "6379:6379"
    volumes:
      - redis_data_debug:/data
    networks:
      - rag-network-debug
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  rag_data_debug:
    driver: local
  rag_uploads_debug:
    driver: local
  redis_data_debug:
    driver: local

networks:
  rag-network-debug:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
