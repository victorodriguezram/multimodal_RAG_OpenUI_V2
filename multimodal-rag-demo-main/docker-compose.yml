version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: multimodal-rag-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-multimodal_rag_secure_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata and user management
  postgres:
    image: postgres:15-alpine
    container_name: multimodal-rag-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-multimodal_rag}
      POSTGRES_USER: ${POSTGRES_USER:-rag_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rag_user} -d ${POSTGRES_DB:-multimodal_rag}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main RAG API Service
  rag-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: multimodal-rag-api
    restart: unless-stopped
    environment:
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-flash-preview-04-17}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-multimodal_rag_secure_password}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-rag_user}:${POSTGRES_PASSWORD:-secure_postgres_password}@postgres:5432/${POSTGRES_DB:-multimodal_rag}
      - API_SECRET_KEY=${API_SECRET_KEY:-your_very_secure_secret_key_here}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      - MAX_FILE_SIZE_MB=${MAX_FILE_SIZE_MB:-50}
      - DATA_VOLUME_PATH=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - rag_data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit UI Service
  rag-ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: multimodal-rag-ui
    restart: unless-stopped
    environment:
      - API_BASE_URL=http://rag-api:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    ports:
      - "8501:8501"
    depends_on:
      rag-api:
        condition: service_healthy
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: multimodal-rag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - rag-api
      - rag-ui
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Task Worker (for async operations)
  rag-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: multimodal-rag-worker
    restart: unless-stopped
    environment:
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-multimodal_rag_secure_password}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-rag_user}:${POSTGRES_PASSWORD:-secure_postgres_password}@postgres:5432/${POSTGRES_DB:-multimodal_rag}
      - DATA_VOLUME_PATH=/app/data
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - rag_data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - rag_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-rag-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag_network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-rag-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rag_network

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  rag_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
