# Docker Compose production configuration for Multimodal RAG System
# Includes nginx reverse proxy, PostgreSQL, and Redis

services:  # Main RAG Application with API
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multimodal-rag-app
    environment:
      - COHERE_API_KEY=${COHERE_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-2.5-pro}
      - DATA_DIR=/app/data
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=true
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
    ports:
      - "8501:8501"
      - "8000:8000"  # FastAPI port for n8n integration
    volumes:
      - rag_data:/app/data
      - rag_uploads:/app/uploads
    networks:
      - rag-network
    restart: unless-stopped
    command: >
      bash -c "
        streamlit run app.py 
        --server.port 8501 
        --server.address 0.0.0.0 
        --server.headless true
        --server.enableCORS true
        --server.enableXsrfProtection false
        --browser.gatherUsageStats false &
        python -m uvicorn api:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis

  # Redis for caching embeddings and session data
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - rag-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for storing document metadata and user sessions
  postgres:
    image: postgres:15-alpine
    container_name: rag-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ragdb}
      - POSTGRES_USER=${POSTGRES_USER:-raguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ragpass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - rag-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-raguser} -d ${POSTGRES_DB:-ragdb}"]
      interval: 10s
      timeout: 5s
      retries: 5  # Nginx reverse proxy for production deployment
  nginx:
    image: nginx:alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - rag-network
    restart: unless-stopped
    depends_on:
      - rag-app
    healthcheck:
      test: ["CMD", "sh", "-c", "pidof nginx"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  rag_data:
    driver: local
  rag_uploads:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
