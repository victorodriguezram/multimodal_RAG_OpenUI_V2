name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.api.txt
        pip install -r requirements.test.txt
    
    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/testdb" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "API_KEY=test-api-key" >> $GITHUB_ENV
        echo "ADMIN_KEY=test-admin-key" >> $GITHUB_ENV
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check api/
        isort --check-only api/
    
    - name: Run type checking
      run: |
        pip install mypy
        mypy api/ --ignore-missing-imports
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=api --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r api/ -f json -o bandit-report.json
    
    - name: Run Safety check
      run: |
        pip install safety
        safety check -r requirements.api.txt

  build-api:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-ui:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-ui
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push UI image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.ui
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-worker:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
    
    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.worker
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: [build-api, build-ui, build-worker]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        cp .env.example .env
        docker-compose up -d --wait
    
    - name: Wait for services
      run: |
        timeout 300 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 300 bash -c 'until curl -f http://localhost:8501; do sleep 5; done'
    
    - name: Run integration tests
      run: |
        pip install requests pytest
        python -m pytest tests/integration/ -v
    
    - name: Collect logs
      if: failure()
      run: |
        docker-compose logs > docker-logs.txt
    
    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: docker-logs
        path: docker-logs.txt
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [integration-test]
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be:
        # - SSH to staging server and run deployment script
        # - Update Kubernetes manifests
        # - Trigger deployment pipeline
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests for staging environment

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [integration-test]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke tests for production environment
    
    - name: Notify deployment
      run: |
        echo "Notifying team of successful deployment..."
        # Add notification logic (Slack, email, etc.)
